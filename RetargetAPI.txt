 Rest Assured is a java Library for testing and validating Rest Services
or API or Web Services..
It is a open source tool avilable in market..
Earlier it was devloped by Ruby and Groovy language which was
not easily compatible to use.
But later it was devloped by java which make it easy and and more 
compactable.
It was devloped by Johan Haleby in year of 2010..

Advantage of Rest Assured:

->It support schema Validation
->Support JsonPath and xmlPAth

Video 26 and Video27 do


static Import:
static import is a import in which if I do not want to write class 
name again and again then we will write static import..
this feature intraduced in version 1.5v




Lets see method Chaning one Example:
Using Collection:
public class Demo {
	public static void main(String[] args) {
		List<String> names =Arrays.asList("Ind","pak","Aus","Ken");
		
		List<String> customNames= new ArrayList<String>();
		
		//names.add("Country");
		
		for(String s:names)
		{
		   String finalName=s+" Country";	
		   customNames.add(finalName);
		}
		System.out.println(customNames);
		
		//Same program can be done by using method Chaning:
		
		Stream<String> newDAta=names.stream();
		Stream<Object> updateddata=  newDAta.map(e -> e+"Fruit");
		   List<Object> finalName=      updateddata.collect(Collectors.toList());
		       
		   System.out.println(finalName);
		
		
		
	}

}

Example2:
package Day3MethodsChaning;

public class SimpleExample {
	
	public SimpleExample m1()
	{
		System.out.println("Star");
		return this;
	}
	public SimpleExample m2()
	{
		System.out.println("343");
		return this;
	}
	public static void main(String[] args) {
		SimpleExample s = new SimpleExample();
		s.m1().m2();
	}
}


Video 5:
Mainly it is involved in three steps 
1-Build Request
2-Hit Request and get Response
3-Validate Response
Our url to practise
https://restful-booker.herokuapp.com/



Required deatils of hit API:
->What hht method it will support?
->File URL->BaseURL and BasePath
for this URL:
https://restful-booker.herokuapp.com/booking
1-Build Request

BaseURL-https://restful-booker.herokuapp.com/
BasePath/booking

Payload is mendatory for Creating data
{
    "firstname" : "Jim",
    "lastname" : "Brown",
    "totalprice" : 111,
    "depositpaid" : true,
    "bookingdates" : {
        "checkin" : "2018-01-01",
        "checkout" : "2019-01-01"
    }

To start this we have some terminology 
RestAssured
RestAsuresdSpecifiacation
given();
Here RestAssured is a class whose and given is a static
method whose return type is ResuestSpecification;

RequestSpecification requestspection =RestAssured.given();
requestspection.log().all().
requestspection.baseUri("https://restful-booker.herokuapp.com/booking/")
requestspection.basePath("booking");
requestspection.body("{
    "firstname" : "Jim",
    "lastname" : "Brown",
    "totalprice" : 111,
    "depositpaid" : true,
    "bookingdates" : {
        "checkin" : "2018-01-01",
        "checkout" : "2019-01-01"
    }");

Now refactor in shorter way:


Note:Here it is mendatory to provide that in which format we are sending the data for that we have content-type
,So if you notice in postman it will take automaically but here in rest Assured it is mendatory to provide it.

2-Hit Request and get Response
   Response response= requestspection.post()
  Note:Post return type Response
  Both RequestSpicification and Response are interface
3-
     ValidateResponse validateResponse=response.then();
      validateResponse.statusCode(200);


Now consolidated code:
   RestAssured.given()
    .log().all().
    .baseUri("https://restful-booker.herokuapp.com/booking/")
    .basePath("booking");
    .body("{
    "firstname" : "Jim",
    "lastname" : "Brown",
    "totalprice" : 111,
    "depositpaid" : true,
    "bookingdates" : {
        "checkin" : "2018-01-01",
        "checkout" : "2019-01-01"
    }")
    .requestspection.post()
    .statusCode(200);




Now same way we can Get the request::

//Build request:
RequestSpecification reqspecfica=RestAssured.given();
reqspecfica.baseUri("");
reqspecfica.basepath("booking/{id}");
reqspecfica.pathParam("id",1);

Note:Here we are using basePath I am passing "CurlyBraces"{} inside which I am giving ID because so that it
should pass the End point with pathParam...
//Hit the request get the Response:
Responsecresponse = reqspecfica.get();
//ValidatableResponse validateResponse =response().then().log().all();
validateResponse.statusCode(200);


Video10:
PathParameters and URL Parameters: 
 
PathParameters:
In this we will provide the pathparam() to provide
the endpints which is chaging everytime

https://www.google.com/news
https://www.google.com/news/India/Karnataka
In the above India and Karnataka can change any time according to our serching so to overcome we
will go for this pathParameter or URL parameters...
https://www.google.com/news/{country}/{city}

Lets take an example of herokupp in our URL

https://restful-booker.herokuapp.com/booking/:id

RequestSpecification reqSpec = RestAssured.given();
reqSpec.baseUri("https://restful-booker.herokuapp.com/booking/{id}")
reqSpec.pathParam("id":1);

URL parameter:
In Url paramter we will not provide the pathParam methods we will directly use the
curlybraces in URL
Example:
RestAssured.given().log().all()
.baseUri("https://restful-booker.herokuapp.com/")
.basePath("{basepath}/{bookingID}")
.when()
.get("https://restful-booker.herokuapp.com/{basePath}/{bookingId}",2,"booking");
.then()
.log()
.all(); 

Note:We can use both pathParameter and URL parameter simultainusly..

Now Using Maps Cocncept How to work with it:
psvm()
{
  Map<String,Object> pathParameter= new HashMap<>();
   pathParameter.put("basePath","booking");
   pathParameter.put("bookingId",2)
  
   RestAssured.given().log().all()

   .baseUri("https://restful-booker.herokuapp.com/")
   .basePath("{basePath}/{bookingId}")
    
    .pathParams(pathParameters)
   
   .when()

       .get().then().log().all();
   
}



Video11
PUT
A HTTP request method to update or create a resouces
It replaces the current representation of the resouces with the new request 
payload if resiuce is found.
If resouce is not found on server,PUT should capable
to create a new resouce
Here we will get 201 ,200,204
201->Resource is created
200->Resouce is updated
204->No content

Patch
->A HTTP request method to update a resource partially or completly
->It represents what parts of resource need to be updated
-->Not a safe method.

Note:
Put requres complete payload whereas PAtch requres only that perticular payload
Can create resource if not found,Patch can not create resouces if not found..
PUt->200,201,204
Patch
200,204

Now do one patch program in same url::

Delete:
A HTTP request method to delete the resource
It may have a request body and response body
200(OK),204(No Content),202(Accepted)
//Check for Delete

Extract Data from Response from RestAssured:
@Test
	public void extractData()
	{
	  String data=	RestAssured.given()
		.log().all()
		.contentType("application/json")
		.body("{\r\n"
				+ "    \"firstname\" : \"Jim\",\r\n"
				+ "    \"lastname\" : \"Brown\",\r\n"
				+ "    \"totalprice\" : 111,\r\n"
				+ "    \"depositpaid\" : true,\r\n"
				+ "    \"bookingdates\" : {\r\n"
				+ "        \"checkin\" : \"2018-01-01\",\r\n"
				+ "        \"checkout\" : \"2019-01-01\"\r\n"
				+ "    },\r\n"
				+ "    \"additionalneeds\" : \"Breakfast\"\r\n"
				+ "}")
		.baseUri("https://restful-booker.herokuapp.com/booking")
		.when().post()
		.then()
		.extract()
                                  .body()
		.asString();
	  
	  System.out.println("++++++++++++++++"+data);
	}


Here  to fetch the data from RestAssred we use one metthd as .extract().asString();
Now we will go to fetch the data from in prettyFormat we will go for 
 extract().asPrettyString(); 
Note -If we do not give body then by default it will take body 


ResrAssured in RequestSpecificatopn Specification:
In this if we have multiple request and many of the lines are
same in every request then we can go for
@BeforeClass
@Test

By using spec() method we can continue the further steps 

RequestSpecification rst;
	@BeforeClass
	public void commonData()
	{
		rst=RestAssured.given().log().all();
		rst.contentType("application/json")
		.baseUri("https://restful-booker.herokuapp.com/");
		
		
	}
	@Test
	public void createData()
	{
		RestAssured.given()
		.spec(rst)
		.basePath("booking")
		.body("{\r\n"
				+ "    \"firstname\" : \"Jim\",\r\n"
				+ "    \"lastname\" : \"Brown\",\r\n"
				+ "    \"totalprice\" : 111,\r\n"
				+ "    \"depositpaid\" : true,\r\n"
				+ "    \"bookingdates\" : {\r\n"
				+ "        \"checkin\" : \"2018-01-01\",\r\n"
				+ "        \"checkout\" : \"2019-01-01\"\r\n"
				+ "    },\r\n"
				+ "    \"additionalneeds\" : \"Breakfast\"\r\n"
				+ "}")
		.when()
		.post()
		.then()
		.statusCode(200)
		.log()
		.all();
	}
---------------------------------------------------
ResponseSpecification in RestAssured
In Response specifiaction we will go for RestAssured.except()
Which is used to validate all the responses in the then section
We will go for theis when for multiple request we want to provide the same response

ResponseSpecification res;
	@BeforeClass
	public void setResponse()
	{ 
		 res = RestAssured.expect();	
		res.statusCode(200)
		.time(Matchers.lessThan(5000L))
		.contentType(ContentType.JSON);
		
		
	}
	@Test
	public void responseValidate()
	{
		
		
		RestAssured
		.given()
		.log().all()
		.contentType("application/json")
		.baseUri("https://restful-booker.herokuapp.com/booking")
		.body("{\r\n"
				+ "    \"firstname\" : \"Jim\",\r\n"
				+ "    \"lastname\" : \"Brown\",\r\n"
				+ "    \"totalprice\" : 111,\r\n"
				+ "    \"depositpaid\" : true,\r\n"
				+ "    \"bookingdates\" : {\r\n"
				+ "        \"checkin\" : \"2018-01-01\",\r\n"
				+ "        \"checkout\" : \"2019-01-01\"\r\n"
				+ "    },\r\n"
				+ "    \"additionalneeds\" : \"Breakfast\"\r\n"
				+ "}")
		.when()
		.post()
		.then()
		.spec(res);
		
		
	}
	@Test
	public void responseValidate2()
	{
		
		
		RestAssured
		.given()
		.log().all()
		.contentType("application/json")
		.baseUri("https://restful-booker.herokuapp.com/booking")
		.body("{\r\n"
				+ "    \"firstname\" : \"JimData\",\r\n"
				+ "    \"lastname\" : \"Brown\",\r\n"
				+ "    \"totalprice\" : 111,\r\n"
				+ "    \"depositpaid\" : true,\r\n"
				+ "    \"bookingdates\" : {\r\n"
				+ "        \"checkin\" : \"2018-01-01\",\r\n"
				+ "        \"checkout\" : \"2019-01-01\"\r\n"
				+ "    },\r\n"
				+ "    \"additionalneeds\" : \"Breakfast\"\r\n"
				+ "}")
		.when()
		.post()
		.then()
		.spec(res);
		
		
	}


}



Video19:
Both RequestSpecification and ResponseSpecification Similtainusly
public class UsingBothReqResSpecification {
	@Test
	public void m1()
	{
		RequestSpecification rst=RestAssured.given().log().all();
		rst.contentType("application/json")
		.baseUri("https://restful-booker.herokuapp.com/booking");
		
		ResponseSpecification res = RestAssured.expect();	
			res.statusCode(200)
			.time(Matchers.lessThan(5000L))
			.contentType(ContentType.JSON);
			
		
		RestAssured
	.given()
	.spec(rst)
	.body("{\r\n"
			+ "    \"firstname\" : \"JimData\",\r\n"
			+ "    \"lastname\" : \"Brown\",\r\n"
			+ "    \"totalprice\" : 111,\r\n"
			+ "    \"depositpaid\" : true,\r\n"
			+ "    \"bookingdates\" : {\r\n"
			+ "        \"checkin\" : \"2018-01-01\",\r\n"
			+ "        \"checkout\" : \"2019-01-01\"\r\n"
			+ "    },\r\n"
			+ "    \"additionalneeds\" : \"Breakfast\"\r\n"
			+ "}")
	.when()
	.post()
	.then()
	.spec(res);
	}

}

Video 20:
Asserting with different sets of Data:
@Test
	public void timeCheckData()
	{
		Response res= RestAssured.given()
		.log().all().contentType("application/json")
		.baseUri("https://restful-booker.herokuapp.com/booking/1")
		.when().get();
		System.out.println(res.getTime());
		System.out.println(res.getTimeIn(TimeUnit.SECONDS));
		res.then().time(Matchers.lessThan(5000L));
		res.then().time(Matchers.greaterThan(2000L));
		 
	}

}

Video21:
Default Value in RestAssured:
There will be default value for BaseURI and Base Path which are static 
so we will reinitialize the value one time and we can use it multiple 
times...
By default it will have some localhost8080...

So if we reinitilize one time I can use it in testNg.xml also...
package Practise;

import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import io.restassured.RestAssured;
import io.restassured.specification.RequestSpecification;
import io.restassured.specification.ResponseSpecification;

public class DefaultValuesInVideo21 {
	RequestSpecification rs ;
	ResponseSpecification rsp;
	@BeforeClass
	public void setup()
	{
		
				
		RestAssured.baseURI="https://restful-booker.herokuapp.com/";
		RestAssured.basePath="booking";
		
		rs=RestAssured.given()
				.log().all().contentType("application/json");
		rsp=RestAssured.expect()
				.statusCode(200);
	}
	
	@Test
	public void defaultTime()
	{
		//.baseUri("https://restful-booker.herokuapp.com/")
		//.basePath("booking")
		RestAssured.given().spec(rs)
		.body("{\r\n"
				+ "    \"firstname\" : \"Jim\",\r\n"
				+ "    \"lastname\" : \"Brown\",\r\n"
				+ "    \"totalprice\" : 111,\r\n"
				+ "    \"depositpaid\" : true,\r\n"
				+ "    \"bookingdates\" : {\r\n"
				+ "        \"checkin\" : \"2018-01-01\",\r\n"
				+ "        \"checkout\" : \"2019-01-01\"\r\n"
				+ "    },\r\n"
				+ "    \"additionalneeds\" : \"Breakfast\"\r\n"
				+ "}")
		.when()
		.post()
		.then().spec(rsp);
		
		
	}
	@Test
	public void defaultTime1()
	{
		RestAssured.given().spec(rs)
		//.baseUri("https://restful-booker.herokuapp.com/")
		//.basePath("booking")
		.body("{\r\n"
				+ "    \"firstname\" : \"Jim1\",\r\n"
				+ "    \"lastname\" : \"Brown1\",\r\n"
				+ "    \"totalprice\" : 1111,\r\n"
				+ "    \"depositpaid\" : true,\r\n"
				+ "    \"bookingdates\" : {\r\n"
				+ "        \"checkin\" : \"2018-01-01\",\r\n"
				+ "        \"checkout\" : \"2019-01-01\"\r\n"
				+ "    },\r\n"
				+ "    \"additionalneeds\" : \"Breakfast\"\r\n"
				+ "}")
		.when()
		.post()
		.then()
		.spec(rsp);
		
	}
	
}





Video22:
Headers In PostMan:
Headers are metadata associated with request
and response of API..
It may contatin Autorization,cookies,body type
,proxies,additional data for API work
It will be in th form of Key and Value or Key with multiple Values..
It is not compulsary that every time we will pass the headers sometimes
it will be added automaticaly when we send requrest..

public class Video22HeadersExamples {
	
	@Test
	public void headers()
	{
		RestAssured.given().log().all()
		.header("Key1","value1")
		.when()
		.get();
	}

}
In this example  we can see the RTE but headers we will get..
@Test
	public void PassingHeadersMultipleValue()
	{
		RestAssured.given().log().all()
		.header("Key1","value1")
		.header("Key1","value11111")
		.header("Key","val1","val2")
		.when()
		.get();
	}




->>In the same way we can pass the key and value of Header in seperate
Object and we will pass the reference in header();

Same we are having one more methods called as headers() in this we can pass multiple key and value pairs...

@Test
	public void PassingHeadersMultipleValue()
	{
		
                                  RestAssured.given().log().all()
		.headers("K1","v1","K2","v2","K3","v3","K3","v4")
		.when()
		.get();
	}


So it is not good practise to pass the data  derectly so
we will use maps
 
@Test
	public void passHeadersMap()
	{
		Map<String, String> headermap= new HashMap<>();
		headermap.put("h1","v1");
		headermap.put("h2","v2");
		headermap.put("h3","v3");
		headermap.put("h4","v4");
		headermap.put("h5","v5");
		
		RestAssured.given()
		.log().all()
		.headers(headermap)
		.when().get();				
	}


Using Maps is a best Way 
@Test
	public void passHeaderInMaps()
	{
		List<Header> allHeade=new ArrayList<>();
		Header head = new Header("KK1","VV2");
		Header head1 = new Header("KK2","VV3");
		Header head2 = new Header("K1","VV4");
		allHeade.add(head);
		allHeade.add(head1);
		allHeade.add(head2);
		Headers headerall=new Headers(allHeade);
		RestAssured.given()
		.log().all()
		.headers(headerall)
		.when().get();
		
	}


Video24
Json Path::
Simlar to xpath but differs in syntax..

JsonPath is an expression to refer or uniquely identifying
a node or element in a JSON document..
It can also be called as query language for JSON document.
Rest Assured used Groovy.s Gpath notation and is not
to be confused with Jayway's JsonPath syntax
No need to add any extry lib.. and Rest Assured includes
that by default..

Some Basic Rules:
->Root nodes is represented using dollor($) sign...
->Child node is represent using (.)..
->We can not use square bracket [] to represent child node..


Now we will go for one simple code in which we will add 
try to fetch the data from jsonPathFinder in google then 
we will go for script where will use object of JsonPath then
by using it we will use get methods
{
  "fn":"Raja",
  "ln":"Rani"
}


Real Script
package Practise;

import org.testng.annotations.Test;

import io.restassured.path.json.JsonPath;

public class Video24JsonIntro {
	@Test
	public void JsonIntroData()
	{
		String jsonData="{\r\n"
				+ "  \"fn\":\"Raja\",\r\n"
				+ "  \"ln\":\"Rani\"\r\n"
				+ "}";
		JsonPath jp = new JsonPath(jsonData);
		String data= jp.get("fn");
		System.out.println(data);
		
		
	}

}

We can also use one more overloaded methof of get( ). whose return type is Object but this method we will use
when we are not aware what type of data we are going to fetch...

Ques:When we get class Cast exceptions?
Using get method we will get() ->classCast exception
If we use the get method if it is fetch String Datatype but it is fetch
number then we get class Cast Exception.

Ques->
What will happen if I pass wrong jsonPath..
It I am using getString to fetch the String then we will get null but intead of string If I use any other like getBoolean(),
getInt() then we require null pointer exception,

Ques-How to get the root node?
System.out.println((Object)jsonPath.get("$"));
Video26:
Normal Code for JSON are
{
  "Name":"Abhi",
  "Rollnum":123,
  "trainer":"maths",
   "sal":212,
   "adress":{
     "place":"Hyd",
     "Area":"KPHB"
     
     
   }
  
  
}
Now try to fetch the data from given JSON::

public class Video26JSonFetchData {
	
	@Test
	public void JsonDataFetch()
	{
		String data="{\r\n"
				+ "  \"Name\":\"Abhi\",\r\n"
				+ "  \"Rollnum\":123,\r\n"
				+ "  \"trainer\":\"maths\",\r\n"
				+ "   \"sal\":212,\r\n"
				+ "   \"adress\":{\r\n"
				+ "     \"place\":\"Hyd\",\r\n"
				+ "     \"Area\":\"KPHB\"\r\n"
				+ "     \r\n"
				+ "     \r\n"
				+ "   }\r\n"
				+ "  \r\n"
				+ "  \r\n"
				+ "}";
		
		JsonPath js = new JsonPath(data);
		
		System.out.println(js.get("Name"));
		System.out.println(js.getString("adress.place"));
		
		
		
	}

}


Video 27:
Only told about Storing of Array and Array inside Object and Array::

Video28:
[
 {
  "id":"Star",
   "data":"boolean",
   "sub":
   [
     {
       "maths":"344",
       "phy":"444"
     },
     {
       "comp":"434",
       "eng":"545",
       "rgt":"455"
     }
   ]
   
 },
 {
  "id":"Star",
   "data":"boolean",
   "sub":"java"
   
 }
 
   
]

Video28: JSON Path for tricky Array and Nested Json Array:
[
 "10",
 "20",
 "30",
 "40",
 "50"
]
The above is also the Json Code:

Fetch from Simple Array
public class Video28 {
	@Test
	public void JsonArray()
	{
		String data="[\r\n"
				+ " \"10\",\r\n"
				+ " \"20\",\r\n"
				+ " \"30\",\r\n"
				+ " \"40\",\r\n"
				+ " \"50\"\r\n"
				+ "]";
		JsonPath jp = new JsonPath(data);
		Object obj= jp.get("[0]");
		System.out.println(obj);
		System.out.println(jp.getString("[0]"));
	}

}

How to calculate the size of perticular Array:(Video28)
[
  [
	"10",
	"20",
	"30",
	"40",
	"50"
],
[
	"10",
	"20",
	"30",
	"40",
	"50"
]
]

public class Video28 {
	@Test
	public void JsonArray()
	{
		String data="[\r\n"
				+ " \"10\",\r\n"
				+ " \"20\",\r\n"
				+ " \"30\",\r\n"
				+ " \"40\",\r\n"
				+ " \"50\"\r\n"
				+ "]";
		JsonPath jp = new JsonPath(data);
	    List<Object> list = jp.getList("$");
	    System.out.println(list.size());
	
	
	}

}

How To fetch Level two Array::


@Test
	public void multipleElemet()
	{
		String data="[\r\n"
				+ "  [\r\n"
				+ "	\"10\",\r\n"
				+ "	\"20\",\r\n"
				+ "	\"30\",\r\n"
				+ "	\"40\",\r\n"
				+ "	\"50\"\r\n"
				+ "],\r\n"
				+ "[\r\n"
				+ "	\"10\",\r\n"
				+ "	\"20\",\r\n"
				+ "	\"30\",\r\n"
				+ "	\"40\",\r\n"
				+ "	\"50\"\r\n"
				+ "]\r\n"
				+ "]";
		
		JsonPath jp = new JsonPath(data);
		System.out.println(jp.getString("[1][1]"));
		
		
	}


Case2:
@Test
	public void multipleElemet()
	{
		String data="[\r\n"
				+ "  [\r\n"
				+ "	\"10\",\r\n"
				+ "	\"20\",\r\n"
				+ "	\"30\",\r\n"
				+ "	\"40\",\r\n"
				+ "	\"50\"\r\n"
				+ "],\r\n"
				+ "[\r\n"
				+ "	\"10\",\r\n"
				+ "	\"20\",\r\n"
				+ "	\"30\",\r\n"
				+ "	\"40\",\r\n"
				+ "	\"50\"\r\n"
				+ "]\r\n"
				+ "]";
		
		JsonPath jp = new JsonPath(data);
		System.out.println(jp.getString("[1][1]"));
		System.out.println(jp.getList("$").size());//Size of all Array it will give
		//But I want the particular array so
		System.out.println(jp.getList("$").get(1));//[10,20,30,40,50]
		 
		List<Object> l = (List<Object>) jp.getList("$").get(1);
		System.out.println(l.size());
		
		
	}



Video29:
[
  {
   "firstName":"Mukesh",
   "lastName":"Ota"
    "age":           31
     "adress:"[
           {
             "city":"ald"
             "country":"India"             
           },
           {
             "city":"pak"
             "country":"India"             
           }

                    ]
              
  },
 {
   "firstName":"Dona",
   "lastName":"Ota"
    "age":           3
     "adress:"[
           {
             "city":"cnb"
             "country":"India"             
           },
           {
             "city":"Ban"
             "country":"India"             
           }

                    ]
              
  }
]

Video29 Fetching Data Script:

public class Video29 {
	
	@Test
	public void m1()
	{
		String s="[\r\n"
				+ "  {\r\n"
				+ "   \"firstName\":\"Mukesh\",\r\n"
				+ "   \"lastName\":\"Ota\",\r\n"
				+ "    \"age\":      31,\r\n"
				+ "     \"adress\":[\r\n"
				+ "           {\r\n"
				+ "             \"city\":\"ald\",\r\n"
				+ "             \"country\":\"India\"             \r\n"
				+ "           },\r\n"
				+ "           {\r\n"
				+ "             \"city\":\"pak\",\r\n"
				+ "             \"country\":\"India\"             \r\n"
				+ "           }\r\n"
				+ "\r\n"
				+ "              ]\r\n"
				+ "              \r\n"
				+ "  },\r\n"
				+ " {\r\n"
				+ "   \"firstName\":\"Dona\",\r\n"
				+ "   \"lastName\":\"Ota\",\r\n"
				+ "    \"age\":           3,\r\n"
				+ "     \"adress\":[\r\n"
				+ "           {\r\n"
				+ "             \"city\":\"cnb\",\r\n"
				+ "             \"country\":\"India\"             \r\n"
				+ "           },\r\n"
				+ "           {\r\n"
				+ "             \"city\":\"Ban\",\r\n"
				+ "             \"country\":\"India\"             \r\n"
				+ "           }\r\n"
				+ "\r\n"
				+ "                    ]\r\n"
				+ "              \r\n"
				+ "  }\r\n"
				+ "]";
		JsonPath jp = new JsonPath(s);
		String data= jp.getString("[0].adress[0].city");
		System.out.println(data);
		
	}

}

Video29:
Fetch the Data from File of Json And 

public class Video30FileJsonFetch {
	@Test
	public void m1()
	{
		String s = System.getProperty("user.dir")+"./JsonFileVideo30.json";
		File f = new File(s);
		System.out.println(s);
		JsonPath jp = new JsonPath(f);
		System.out.println(jp.getString("[2][1].city"));
	}

}


Video30:
Fetch the JSON path Filters In Rest Assured:
When ever we want to fetch the multiple data of same type..
-----------------------------------------------------------------------------
[
	{
		"firstName": "Mukesh",
		"lastName": "Ota",
		"age": 31,
		"adress": [
			{
				"city": "ald",
				"country": "India"
			},
			{
				"city": "pak",
				"country": "India"
			}
		]
	},
	{
		"firstName": "Mukesh1",
		"lastName": "Ota1",
		"age": 311,
		"adress": [
			{
				"city": "ald1",
				"country": "India1"
			},
			{
				"city": "pak1",
				"country": "India1"
			}
		]
	},
	{
		"firstName": "Mukesh2",
		"lastName": "Ota2",
		"age": 312,
		"adress": [
			{
				"city": "ald2",
				"country": "India2"
			},
			{
				"city": "pak2",
				"country": "India2"
			}
		]
	},
	{
		"firstName": "Mukesh3",
		"lastName": "Ota3",
		"age": 313,
		"adress": [
			{
				"city": "ald3",
				"country": "India3"
			},
			{
				"city": "pak3",
				"country": "India3"
			}
		]
	},
	{
		"firstName": "Mukesh4",
		"lastName": "Ota4",
		"age": 314,
		"adress": [
			{
				"city": "ald4",
				"country": "India4"
			},
			{
				"city": "pak4",
				"country": "India4"
			}
		]
	},
	{
		"firstName": "Mukesh5",
		"lastName": "Ota5",
		"age": 315,
		"adress": [
			{
				"city": "ald5",
				"country": "India5"
			},
			{
				"city": "pak5",
				"country": "India5"
			}
		]
	},
	{
		"firstName": "Mukesh6",
		"lastName": "Ota6",
		"age": 316,
		"adress": [
			{
				"city": "ald6",
				"country": "India6"
			},
			{
				"city": "pak6",
				"country": "India6"
			}
		]
	},
	{
		"firstName": "Mukesh7",
		"lastName": "Ota7",
		"age": 317,
		"adress": [
			{
				"city": "ald7",
				"country": "India7"
			},
			{
				"city": "pak7",
				"country": "India7"
			}
		]
	
		
	}
]	
----------------------------------------------------
blic class Video30 {
	@Test
	public void fetchMultipleData()
	{
		String path= System.getProperty("user.dir")+"./MultipleDataFetch.json";
	
		File f = new File(path);
		
		JsonPath jp = new JsonPath(f);
		
		System.out.println(jp.getString("[0].firstName"));
		   //It will fetch all the data of that perticular JSON which are similar
		   List<Object> fn = jp.getList("firstName");
		   System.out.println(fn+"d");
		   System.out.println(fn.toString()+"d");
		   
		   
		   
		   	}
	
	

}
Note:
If you donot have that value it will give the  null..

-------------------------------------------------------------------------
Now if I want to fetch only that value which is present for that perticular
condition::

@Test
	public void fetchMultipleData()
	{
		String path= System.getProperty("user.dir")+"./MultipleDataFetch.json";
	
		File f = new File(path);
		
		JsonPath jp = new JsonPath(f);
		
		System.out.println(jp.getString("[0].firstName"));
		   //It will fetch all the data of that perticular JSON which are similar
		   List<Object> fn = jp.getList("firstName");
		   System.out.println(fn+"d");
		   System.out.println(fn.toString()+"d");
		   
		   List<Object> perticularlastNameName=jp.getList("findAll{it.age==31}.lastName");
		   
		   System.out.println(perticularlastNameName);
		   
		   List<Object> fetchAllCity=jp.getList("findAll{it.lastName=='Ota'}.adress.city");
		   
		   System.out.println(fetchAllCity);
		   
}

---------------------------------------------------------------------------
Same way we can go for multiple conditios by using and keyword with find() ::

@Test
	public void fetchMultipleData()
	{
		String path= System.getProperty("user.dir")+"./MultipleDataFetch.json";
	
		File f = new File(path);
		
		JsonPath jp = new JsonPath(f);
		
		System.out.println(jp.getString("[0].firstName"));
		   //It will fetch all the data of that perticular JSON which are similar
		   List<Object> fn = jp.getList("firstName");
		   System.out.println(fn+"d");
		   System.out.println(fn.toString()+"d");
		   
		   String ss = jp.getString("find{it.firstName=='Mukesh' & it.lastName=='Ota'}.age");
		   
		   System.out.println(ss);
		   	
	      
	}
	

//Same way we can use or keyWord

---------------------------------------------------------------------
Same way we can use > and < then also

@Test
	public void fetchMultipleData()
	{
		String path= System.getProperty("user.dir")+"./MultipleDataFetch.json";
	
		File f = new File(path);
		
		JsonPath jp = new JsonPath(f);
		
		System.out.println(jp.getString("[0].firstName"));
		   //It will fetch all the data of that perticular JSON which are similar
		   List<Object> fn = jp.getList("firstName");
		   System.out.println(fn+"d");
		   System.out.println(fn.toString()+"d");
		   
		   String ss = jp.getString("find{it.firstName=='Mukesh' & it.lastName=='Ota'}.age");
		   
		   System.out.println(ss);
		   
		   System.out.println(jp.getList("findAll{it.age>311}.firstName"));
		   	
	      
	}
---------------------------------------------------------------------------------------------------------
Same way if i Want to getSize of jsonpath:

 System.out.println(jp.getInt("size()"));     
----------------------------------------------------------------------------------------------------------
Now we will do little bit change in Json: we have first array then object then array



------------------------------------------------------------------------------------------------------------------------
Inline Assertion:

Assertion 

Assertion of Tokens:
As we know that tokens are genrated so we need to check weather it is it is null or not:
we can do by using method assertNotNull():
@Test
	public void assertToken()
	{
	  String d=RestAssured.given()
		.log().all()
		.contentType("application/json")
		.baseUri("https://restful-booker.herokuapp.com/auth")
		
		.body("{\r\n"
				+ "    \"username\" : \"admin\",\r\n"
				+ "    \"password\" : \"password123\"\r\n"
				+ "}")
		
		.when()
		.post()
		.then()
		.log().all()
		//.statusCode(200)
		.extract()
		.asString();
	  
	  JsonPath jp = new JsonPath(d);
	  
      System.out.println(jp.getString("token").toString());
	  
	  
	  Assert.assertNotNull(jp.get("token"));
	  
	  
	  
	 
	}


Now Same thing we can do by sing Inline assertion in one line:

@Test
	public void inlineAssertion()
	{
		RestAssured.given()
		.log().all()
		.contentType("application/json")
		.baseUri("https://restful-booker.herokuapp.com/auth")
		.body("{\r\n"
				+ "    \"username\" : \"admin\",\r\n"
				+ "    \"password\" : \"password123\"\r\n"
				+ "}")
		.when()
		.post()
		.then()
		.log()
		.all()
		//Check weather token is empty or not
		.body("token",Matchers.notNullValue())
		//It will also calculate the length is equal or not
		.body("token.length()",Matchers.is(15))
		//It will also calculate the length is equal or not
		
		.body("token.size()",Matchers.equalTo(15))
		
		//Check the regex data is present or not
		
		.body("token",Matchers.matchesRegex("^[a-z0-9]+$"));
		
		
		
	}

------------------------------------------------------------------------------
Now we will assert that perticular data is present or not:
.body("bookingid",Matchers.hasItems(2,3));
	
@Test
	public void perticularDataThereOrNot()
	{
			RestAssured.given()
			.log().all()
			.contentType("application/json")
			.baseUri("https://restful-booker.herokuapp.com/booking")
			.body("[\r\n"
					+ "  {\r\n"
					+ "    \"bookingid\": 1\r\n"
					+ "  },\r\n"
					+ "  {\r\n"
					+ "    \"bookingid\": 2\r\n"
					+ "  },\r\n"
					+ "  {\r\n"
					+ "    \"bookingid\": 3\r\n"
					+ "  },\r\n"
					+ "  {\r\n"
					+ "    \"bookingid\": 4\r\n"
					+ "  }\r\n"
					+ "]")
			.when()
			.get()
			.then()
			.log()
			.all()
			.body("bookingid",Matchers.hasItems(2,3));
		}




------------------------------------------------------------------------------------------------
JSON  Schema::

It is a specification or language for defining s
tructure and content of JSON object..
It is a metadata ->data about data
It helps to validate a JSON object or array
Easy to understatnd by human 

If I want to check the validation that Name must be string age and also we can check the range
Here we can go for Basic Json Schema the range of all the data
-------------------------------------------------------------------------------
Video33 Json Schema Validate:
To go with json schema we need to go to jsonSchema.net where we want to copy the the json body and
we need to paste the payload and we need to go for the that perticular validation we will provide...

Now we must create the new file in src/main/resources and copy the scheme code and paste here .

Give this code to the given url
{
    "bookingid": 1,
    "booking": {
        "firstname": "Jim",
        "lastname": "Brown",
        "totalprice": 111,
        "depositpaid": true,
        "bookingdates": {
            "checkin": "2018-01-01",
            "checkout": "2019-01-01"
        },
        "additionalneeds": "Breakfast"
    }
}

and try to validate the jsoncode of ID:::
Note:
To go for validation we require  JsonSchemaValidater class which we need to add the dependencies:

.body(JsonSchemaValidator.matchesJsonSchemaInClasspath("ValidateJsonSchema.json"));



@Test
	public void m1()
	{
		RestAssured.given()
		.log().all()
		.contentType(ContentType.JSON)
		.baseUri("https://restful-booker.herokuapp.com/booking")
		.body("{\r\n"
				+ "    \"firstname\" : \"Jim\",\r\n"
				+ "    \"lastname\" : \"Brown\",\r\n"
				+ "    \"totalprice\" : 111,\r\n"
				+ "    \"depositpaid\" : true,\r\n"
				+ "    \"bookingdates\" : {\r\n"
				+ "        \"checkin\" : \"2018-01-01\",\r\n"
				+ "        \"checkout\" : \"2019-01-01\"\r\n"
				+ "    },\r\n"
				+ "    \"additionalneeds\" : \"Breakfast\"\r\n"
				+ "}")
		.when().post()
		.then()
		.body(JsonSchemaValidator.matchesJsonSchemaInClasspath("ValidateJsonSchema.json"));
	}
 
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Video34:Create payload:
public class Vedio34JsonPayload {
	
	//@Test
	public void createDataMapsOfString()
	{
		Map<String,String> payloadString = new HashMap();
		
		payloadString.put("id", "1");
		payloadString.put("name", "Abhi");
		payloadString.put("rollNum", "123");
		payloadString.put("boolean", "false");
		
		RestAssured.given()
		.log()
		.all()
		.body(payloadString)
		.when()
		.get();
		
	}
	
	@Test
	public void createDataMapsOfObject()
	{
		Map<String,Object> payloadString = new LinkedHashMap<>();
		
		payloadString.put("id", 1);
		payloadString.put("name", "Abhi");
		payloadString.put("rollNum", 123);
		payloadString.put("boolean", false);
		
		RestAssured.given()
		.log()
		.all()
		.body(payloadString)
		.when()
		.get();
		
	}

}

================================================
Video 35 Nested Object jsonPayload Created:
@Test
	public void nestedJsonObjectCheck()
	{
		Map<String,Object> O=new LinkedHashMap();
		O.put("id","21");
		O.put("ade",35);
		
		Map<String,Object> adrMap=new LinkedHashMap();
		adrMap.put("City","Hyd");
		adrMap.put("Street","2");
		adrMap.put("location","hyderabad");
		
		O.put("adress",adrMap);
		
		RestAssured.given()
		.log().all()
		.body(O)
		.when()
		.get()
		;
		
		
		
		
		
		
		
		
		
		
		
		
		
	}
	

=======================================================
Video36:
Create Simple Json Array:

@Test
	public void createArrayPayload()
	{
		Map<String, Object> empDetail= new LinkedHashMap<>();
		empDetail.put("id",1);
		empDetail.put("name","sss");
		empDetail.put("class",3);
		empDetail.put("Com","TCS");
		
		Map<String, Object> empDetai= new LinkedHashMap<>();
		empDetai.put("id",1);
		empDetai.put("name","sss");
		empDetai.put("class",3);
		empDetai.put("Com","TCS");
		
		
		List allEmp= new ArrayList<>();
		allEmp.add(empDetail);
		allEmp.add(empDetai);
		
		RestAssured .given()
		.log()
		.all()
		.body(allEmp)
		.get();
}
============================================
Video Comple Payload Video37:
@Test
	public void createComplexData()
	{

		List finalPayload=new ArrayList();
		
		
		Map<String, Object> payload1=new LinkedHashMap<>();
		payload1.put("id", 1);
		payload1.put("firstName","Abhi");
		payload1.put("ln","Singh");
		payload1.put("email","xyz@gmail.com");
		payload1.put("Gender","M ");
		
		List mobNum=new ArrayList<>();
		mobNum.add("1234567");
		mobNum.add("8889899");
		payload1.put("monNum", mobNum);
		
		
		Map<String, Object> skills=new HashMap<>();
		
		skills.put("java","****");
		skills.put("Auto","***");
		
		payload1.put("Skills",skills);
		
		finalPayload.add(payload1);
		
		
		Map<String, Object> payload2=new LinkedHashMap<>();
		payload2.put("id", 1);
		payload2.put("firstName","Abhi");
		payload2.put("ln","Singh");
		payload2.put("email","xyz@gmail.com");
		payload2.put("Gender","M ");
		
		List mobNum1=new ArrayList<>();
		mobNum1.add("1234567");
		mobNum1.add("8889899");
		payload1.put("monNum", mobNum1);
		
		
		Map<String, Object> skills1=new HashMap<>();
		
		skills1.put("java","****");
		skills1.put("Auto","***");
		
		payload1.put("Skills",skills1);
		
		finalPayload.add(payload2);
		
		RestAssured.given()
		.log().all()
		.body(finalPayload)
		.when()
		.get();
		
		
		
		
	}

==============================================
Video 38 Mock API JSON Response"

It means create your own API data and the Url end points to set 
the data:

https://designer.mocky.io/
We can genarate by this URL:
 
===================================================
Video39"
Convert JsonObject into JAva Map:

{
"id": 1,
"name": "Care",
"gmail": "xyz@gmail.com"
}

@Test
	public void jsonIntoObjectData()
	{
		 Map d = RestAssured.when()
		.get("https://run.mocky.io/v3/d4c02069-256c-4dfa-9c2c-cb0f3287165a")
		.as(Map.class);
		 
		 String data= (String) d.get("name"); 
		 System.out.println(data);//Care
	}


----------------------------------------------------
If I want ro print all the keys of the following 

@Test
	public void jsonIntoObjectData()
	{
		 Map d = RestAssured.when()
		.get("https://run.mocky.io/v3/d4c02069-256c-4dfa-9c2c-cb0f3287165a")
		.as(Map.class);
		 
		 String data= (String) d.get("name"); 
		 System.out.println(data);
		 
		 d.keySet().forEach(K -> System.out.println(K));
	}
}



-----------------------------------------------------------------------
If We have nested Key and value:

https://run.mocky.io/v3/4067ea3b-8f75-4009-be7c-83b5e1d6c33f
{
  "id":"1,
  "name": "Card",
  "last": "Den",
  "skills":
         {
        "java":"**",
        "Automation":"***"       
       }
  
}

For the above program we will try to fetch the value of skills but we can
not fetch in the form of String so first we need to convert it into 
Maps:

@Test
	public void jsonIntoObjectData()
	{
		 Map d = RestAssured
		.get("https://run.mocky.io/v3/4067ea3b-8f75-4009-be7c-83b5e1d6c33f")
		.as(Map.class);
	     
		 Map<String,String> data= (Map<String,String>) d.get("skills");
		System.out.println(data.get("java"));
		
	
	}

Note:
new TypeRef<Map<String,Object>>(){}
It is genrelly used to convert genric class in Maps

=======================================================
Video40:
Note:Object can be converted into Maps then we can fetch::

public class VIdeo40JsonArrayResponseToJavaList {
	//https://run.mocky.io/v3/e1cd9e3a-629d-4517-b749-3c740e8694be
	/*[
	{
	"id": "1",
	"name": "Raja",
	"last-named": "Singh",
	"phone": {
	"home": 1234,
	"office": 33232
	}
	},
	{
	"id": "2",
	"name": "Raj",
	"last-named": "Sing",
	"phone": {
	"home": 12343,
	"office": 332323
	}
	}
	]
	*/
	@Test
	public void arrayResponse()
	{
		List<Object> array = RestAssured.given()
		.log().all()
		.get("https://run.mocky.io/v3/e1cd9e3a-629d-4517-b749-3c740e8694be")
		.as(List.class);
		
		System.out.println(array.size());
		
		System.out.println(array.get(0));//Print peticular
		
		Map<Object, String> obj =(Map<Object, String>) array.get(0);
		
		System.out.println(obj.get("id"));
		
		
	}


======================================================================
If we want to convert my Response in class Type we will use  new TypeRef<List<String <Object>>>
We use this because in above we are doing type casting but here no need to use this:

	@Test
	public void arrayResponseGenric()
	{
		List<Map<String, Object>> array = RestAssured.given()
		.log().all()
		.get("https://run.mocky.io/v3/e1cd9e3a-629d-4517-b749-3c740e8694be")
		.as(new TypeRef<List<Map<String,Object>>>() {
		});
		
		System.out.println(array.size());
		
		System.out.println(array.get(0));//Print peticular
		
		Map<String, Object> data= array.get(0);
		System.out.println(data);
		System.out.println(data.get("id"));
		
	}


}

=========================================================================================
How to handle Dynamic Response?
Dynamic reponse means sometimes  it will return the array or Object we are not sure about of it ..
Like take an example of Bamking domain
But in real time without understanding the funtinality of that API we can not do it randomly...
So we will have to understand the API response then only we can handle it..

When we get com.fasterxml.jackson.databind.exe Exception?
When we we try to fetch the data as JSon Object but it is JSONarray  or vice versa the we will get exception